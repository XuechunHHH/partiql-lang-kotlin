imports::{
  kotlin: [
    partiql_value::'org.partiql.value.PartiQLValue',
  ],
}

parti_q_l_plan::{
  version:    parti_q_l_version,    // version :: (major minor)
  statement:  statement,            // (statement ...)
}

parti_q_l_header::{
  types:     list::[type],  // (types ...)
  functions: list::[fn],    // (fns ...)
}

parti_q_l_version::[
  VERSION_0_0,
  VERSION_0_1,  // CURRENT
]

// Types

type::[
  atomic::{
    symbol: string,
  },
  _::[
    ref::{
      annotation: string,
      ordinal:    int,
    },
  ],
]

// Functions

fn::{
  id:       string,
  params:   list::[param],
  returns:  '.type.ref',
  _: [
    param::[
      value::{
        type: '.type.ref',
      },
      type::{
        type: '.type.ref',
      },
    ],
    ref::[
      resolved::{
        annotation: string,
        ordinal:    int,
      },
      unresolved::{
        identifier: identifier,
      },
    ],
  ],
}

// Statements

statement::[
  query::{
    root: rex,
  },
]

// Identifiers

identifier::[
  symbol::{
    symbol:           string,
    case_sensitivity: case_sensitivity,
  },
  qualified::{
    root:   symbol,
    steps:  list::[symbol],
  },
  _::[
    case_sensitivity::[
      SENSITIVE,
      INSENSITIVE,
    ],
  ],
]

// Rex
rex::{
  type: '.type.ref',
  op:[

    lit::{
      value: partiql_value,
    },

    var::[
      resolved::{
        ref: int,
      },
      unresolved::{
        identifier: identifier,
        scope: scope,
      },
      _::[
        scope::[
          DEFAULT,  //  x.y.z
          LOCAL,    // @x.y.z
        ],
      ],
    ],

    global::{
      ref: int,
    },

    path::{
      root:   rex,
      steps:  list::[step],
      _: [
        step::[
          index::{ key: rex },
          wildcard::{},
          unpivot::{},
        ],
      ],
    },

    call::{
       fn:    '.fn.ref',
       args:  list::[arg],
       _: [
        arg::[
          value::{
            rex: rex,
          },
          type::{
            type: '.type.ref',
          },
        ],
      ],
    },

    // switch
    // tuple
    // collections

    struct::{
      fields: list::[field],
      _: [
        field::{
          k: rex,
          v: rex,
        },
      ],
    },

    pivot::{
      key:    rex,
      value:  rex,
      rel:    rel,
    },

    coll_to_scalar::{
      subquery: {
        select: select,
        type:   '.type.ref' // reify `select` type
      }
    },

    select::{
      constructor:  rex,
      rel:          rel,
    },
  ],
}

// Rel

rel::{
  schema: list::[binding],
  props:  set::[prop],
  op: [

    scan::{
      rex: rex,
    },

    scan_indexed::{
      rex: rex,
    },

    unpivot::{
      rex:  rex,
    },

    distinct::{
      input: rel,
    },

    filter::{
      input:      rel,
      predicate:  rex,
    },

    // TODO
    // sort::{
    //   input: rel,
    //   specs: list::[sort_spec],
    // },

    union::{
      lhs: rel,
      rhs: rel,
    },

    intersect::{
      lhs: rel,
      rhs: rel,
    },

    except::{
      lhs: rel,
      rhs: rel,
    },

    fetch::{
      input:  rel,
      limit:  rex,
      offset: rex,
    },

    project::{
      input:        rel,
      projections:  list::[rex],
    },

    // TODO
    cross_join::{},

    // TODO
    join::{
      condition: [
        theta::{ predicate: rex },
        equal::{},
        natural::{},
      ],
      type: [
        INNER,
        LEFT,
        LEFT_OUTER,
        RIGHT,
        RIGHT_OUTER,
        FULL,
        FULL_OUTER,
      ],
    },

    // TODO
    aggregate::{
      strategy: [ FULL, PARTIAL ],
      aggs:     list::[agg],
      groups:   list::[rex],
      _: [
        agg::{
          fn:   fn,
          args: list::[rex],
        }
      ]
    },
  ],
  _: [
    prop::[
      ORDERED,
    ],
    binding::{
      name: '.identifier.symbol',
      type: '.type.ref',
    },
  ]
}
